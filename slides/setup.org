#+REVEAL_THEME: dracula
#+REVEAL_HLEVEL: 2
#+REVEAL_TITLE_SLIDE:
#+OPTIONS: toc:nil reveal_embed_local_resources:t
#+REVEAL_EXTRA_CSS: ./custom.css

* React Native Setup
You can hit escape and navigate with arrow keys to view a quick overview / go to a specific slide in the deck
** Prerequisites
1. Git and its relevant workflows
2. Javascript (ES6 syntax)
3. HTML / CSS
3. Basic React Knowledge (Referesher Attached)

** Windows / Ubuntu
*** WSL
Install WSL on widows by running ~wsl --install~ in powershell. Read more setup instructions [[https://learn.microsoft.com/en-us/windows/wsl/install][here]]
*** NodeJS
We will be using [[https://volta.sh/][volta]] to handle node versions
#+begin_src bash
sudo apt update && sudo apt upgrade
curl https://get.volta.sh | bash
source ~/.bashrc
volta install node@18
#+end_src

This will install Node.js v18.*.*, the LTS version of node
*** VSCode
Download VSCode [[https://code.visualstudio.com/download][here]]
Install the ~WSL~ extension
** MacOS
Start off with opening up your terminal and run
#+begin_src bash
xcode-select --install
#+end_src

This will install relevant dependencies you will need
*** Homebrew
[[https://brew.sh/][Homebrew]] is a package manager for macOS. The installation instructions can be found on the website or paste the following into the macOS terminal
#+begin_src bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+end_src
*** NodeJS
Run
#+begin_src bash
curl https://get.volta.sh | bash
source ~/.zshrc
volta install node@18
#+end_src
*** VSCode
You can install vscode with homebrew also!
#+begin_src bash
brew install --cask visual-studio-code
#+end_src

With that, we are ready to get started!

** Install expo
Expo is a library / framework built ontop of react-native. As of now, there are little to no reasons not to use expo when starting new react-native projects. The only hiccup you will have is when adding libraries with native modules, but solutions to this will be discussed in the 2nd section
#+begin_src bash
npx expo -h
#+end_src
This will download the expo binary and will list out all options for expo
** Initialize a new Expo App Repository
#+begin_src bash
mkdir ~/dev
cd ~/dev
npx create-expo-app orbital-app
cd orbital-app
npm i
code .
#+end_src
The last line opens the directory in VSCode

*** Expo Go
[[https://docs.expo.dev/get-started/expo-go/][Expo Go]] is a mobile app used for development of expo projects. You can install it from the link above.

Or you can use iOS an android simulator, which is what I will be using for the demos
** Running the app
#+begin_src bash
npx expo start
#+end_src

If you have an android device or are facing issues with connection, you can try to run

#+begin_src bash
npx expo start --tunnel
#+end_src

Scan the QR Code with your camera app and you should be ready to go!


* React Refresher
The recommended reading is the [[https://react.dev/learn/thinking-in-react][thinking in react guide]]. It provides a good overview of how to break a website down into its basic components, how to structure each component and to think about what needs to be stored there

** Functional components
React has 2 paradigms for creating new components, ~class~ and ~functional~ components. We will only be looking at functional components in
** Stateless Components
The component itself doesn't need to keep any state, and can receive details on what to render from its parent component
#+begin_src rjsx
function CommentBox(image, title, body) {
    <div>
        <image src={image} />
        <h3>{title}</h3>
        <p>{body}</p>
    </div>
}
#+end_src
** Stateful Components
These components need to keep track of state across renders
#+begin_src rjsx
function Comment() {
    const [input, setInput] = useState('');
  return <View>
           <TextInput value={input} onChangeText={value => setInput(value)}/>
         </View>
}
#+end_src
* Exercise 0
1. Get the app running on your mobile phone / simulator.
2. Take a look at ~App.js~ and read through the code. Edit the contents to say "Hello ~<yourname>~"
3. Let us know if you have any questions!
* Overview of Workshop 1
1. React Native Components
2. Documentation
3. Styling and flexbox layout
4. UI Libraries
5. Basic State Management

* Overview of Workshop 2
This workshop will be more focused on live coding and Q&A. We will be building a TODO app with networking with supabase

* Hope this has been helpful!
See you on 13th May!
